<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <!-- 模型版本。maven2.0必须是这样写，现在是maven2唯一支持的版本
  	声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，
         这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性 --> 
  <modelVersion>4.0.0</modelVersion>
  <!-- 项目全球唯一标识符 -->
  <groupId>com.yscxsss</groupId>
  <!-- 构件标识符,它和groupId一起唯一标识一个构件,通常使用全限定的包名区分该项目和其他项目。
  	并且构建时生成的路径也是由此生成，如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
  <artifactId>yscxSSM</artifactId>
  <!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
  <version>0.0.1-SNAPSHOT</version>
  <!-- 项目产生的构件类型，打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar -->  
  <packaging>war</packaging>  
  <!-- 项目的名称, Maven产生的文档用 -->
  <name>yscxSSM Maven Webapp</name>
  <!-- 项目主页的URL, Maven产生的文档用 -->
  <url>http://www.yscxsss.com/</url>  
  
  <!-- 为pom定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 ：${file.encoding} -->
  <!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里
       activation元素的说明）。格式是<name>value</name>。 -->
  <!-- 初始化框架的版本号，编码表 -->
  <properties>
  	<spring.version>4.3.9.RELEASE</spring.version>
  	<file.encoding>UTF-8</file.encoding>
  	<servlet.version>3.0.1</servlet.version>
  	<jstl.version>1.2.5</jstl.version>
  </properties>
  
  <!-- 定义本项目的依赖关系，每个dependency都对应这一个jar包 --> 
  <!--一般情况下，maven是通过groupId、artifactId、version这三个元素值（俗称坐标）来检索该构件
  	然后引入你的工程。如果别人想引用你现在开发的这个项目（前提是已开发完毕并发布到了远程仓库）   
        就需要在他的pom文件中新建一个dependency节点，将本项目的groupId、artifactId、version写入
   maven就会把你上传的jar包下载到他的本地 --> 
  <dependencies>
    
    <!-- 添加Log4j依赖 -->  
    <dependency>  
        <groupId>log4j</groupId>  
        <artifactId>log4j</artifactId>  
        <version>1.2.17</version>  
    </dependency>
    
    <!-- 添加junit依赖 -->
	<!-- 关于<scope>
		maven认为，程序对外部的依赖会随着程序的所处阶段和应用场景而变化
      	所以maven中的依赖关系有作用域(scope)的限制。scope包含如下的取值：
      	compile（编译范围）、provided（已提供范围）、runtime（运行时范围）
      	test（测试范围）、system（系统范围） -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
    
    <!-- 添加jstl依赖 -->
	<dependency>
	   <groupId>org.apache.taglibs</groupId>
	   <artifactId>taglibs-standard-compat</artifactId>
	   <version>${jstl.version}</version>
	</dependency>	  
	<dependency>
	   <groupId>org.apache.taglibs</groupId>
	   <artifactId>taglibs-standard-impl</artifactId>
	   <version>${jstl.version}</version>
	</dependency>	  
	<dependency>
	   <groupId>org.apache.taglibs</groupId>
	   <artifactId>taglibs-standard-jstlel</artifactId>
	   <version>${jstl.version}</version>
	</dependency>	  
	<dependency>
	   <groupId>org.apache.taglibs</groupId>
	   <artifactId>taglibs-standard-spec</artifactId>
	   <version>${jstl.version}</version>
	</dependency>
	
	<!-- 添加fastjson依赖 --> 
  	<dependency>  		
        <groupId>com.alibaba</groupId>
        <artifactId>fastjson</artifactId>
        <version>1.2.47</version>
    </dependency>
	<!-- 将java对象转换成json字符串的依赖 -->
  	<dependency>        
		<groupId>net.sf.json-lib</groupId>
		<artifactId>json-lib</artifactId>	
		<version>2.4</version>	
		<classifier>jdk15</classifier>
	</dependency>
	
	<!-- 解决跨域问题的依赖 -->
    <!-- <dependency>
	        <groupId>com.thetransactioncompany</groupId>
	        <artifactId>cors-filter</artifactId>
	        <version>1.7</version>
	    </dependency> -->
    
    <!-- 添加Servlet依赖 -->  
    <dependency>  
        <groupId>javax.servlet</groupId>  
        <artifactId>javax.servlet-api</artifactId>  
        <version>${servlet.version}</version>
        <scope>provided</scope>          
    </dependency>
    <!-- 添加jsp依赖 -->
	<dependency> 
	   <groupId>javax.servlet.jsp</groupId> 
	   <artifactId>jsp-api</artifactId> 
	   <version>2.2</version> 
	   <scope>provided</scope>
	</dependency>
	
	<!-- 添加JDBC依赖 -->  
    <dependency>  
        <groupId>mysql</groupId>  
        <artifactId>mysql-connector-java</artifactId>  
        <version>5.1.38</version>  
    </dependency>
	
    <!-- 添加mybatis依赖 -->  
    <dependency>  
      <groupId>org.mybatis</groupId>  
      <artifactId>mybatis</artifactId>  
      <version>3.4.5</version>  
    </dependency>
    
    <!-- 引用插件依赖：MyBatis整合Spring -->  
    <dependency>  
        <groupId>org.mybatis</groupId>  
        <artifactId>mybatis-spring</artifactId>  
        <version>1.3.0</version>  
    </dependency>
    
    <!-- FIXME 一旦引入spring的包，并update项目，文件就无法改名，就无法删除 -->
    <!-- 引入Spring依赖(包含SpringMVC) -->
    <dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-webmvc</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>
    <dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-web</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-core</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>
 	<dependency>  
     	<groupId>org.springframework</groupId>  
	    <artifactId>spring-oxm</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>  
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-tx</artifactId>  
	    <version>${spring.version}</version>  
	</dependency> 
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-jdbc</artifactId>  
	    <version>${spring.version}</version>  
	</dependency> 
	  
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-aop</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-context-support</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>  
	<dependency>
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-test</artifactId>  
	    <version>${spring.version}</version>  
	</dependency>
	<!--切片包-->  
	<dependency>  
	    <groupId>org.springframework</groupId>  
	    <artifactId>spring-aspects</artifactId>  
	    <version>${spring.version}</version>  
	</dependency> 
	<!-- 配置dbcp数据源的包 -->
    <dependency>  
	    <groupId>commons-dbcp</groupId>  
	    <artifactId>commons-dbcp</artifactId>  
	    <version>1.4</version>  
	</dependency>
  </dependencies>
  
  <!-- 构建项目需要的信息 --> 
  <build>
  	<!-- 产生的构件的文件名，默认值是${artifactId}-${version} --> 
    <finalName>yscxSSM</finalName>
    <sourceDirectory>src/main/java</sourceDirectory>
    <resources>
      <resource>
        <directory>src/main/java</directory>
        <excludes>
          <exclude>**/*.java</exclude>
        </excludes>
      </resource>
      <resource>
          <directory>src/main/resources</directory>          
          <includes>
              <include>log4j.properties</include>
              <include>applicationContext-mybatis.xml</include>
              <include>mybatis-config.xml</include>
              <include>database.properties</include>
          </includes>
      </resource>      
    </resources>
    <!-- maven版本要有对应的java版本，若不一致，则会报错 -->
    <plugins>
		<plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<configuration>
				<!-- java版本？ -->
				<source>1.7</source>
				<!-- java版本？ -->
				<target>1.7</target>
				<encoding>UTF-8</encoding>				
			</configuration>
		</plugin>
		
		<!-- maven的web项目默认的根目录是在src\main\webapp。
			如果在此目录下找不到web.xml就抛出找不到xml的异常。
			即webxml attribute is required (or pre-existing WEB-INF/web.xml if
			因此进行如下配置<webXml>WebRoot\WEB-INF\web.xml</webXml>  -->
		<!-- <plugin>  
		        <groupId>org.apache.maven.plugins</groupId>  
		        <artifactId>maven-war-plugin</artifactId>  
		        <version>2.4</version>  
		        <configuration>  
		            <webXml>WebRoot\WEB-INF\web.xml</webXml>            
		        </configuration>  
	    	</plugin> -->  		
	</plugins>
  </build>
</project>
