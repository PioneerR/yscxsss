<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context"  
    xsi:schemaLocation="
  		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd  
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">  
  
  <!-- 零、引入database.properties -->
  <context:property-placeholder location="classpath:database.properties"/>
  
  <!-- 一、Mybatis配置dbcp数据源,此前用的POOLED与JNDI -->
  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
  		<property name="driverClassName" value="${jdbc.driver}" />  
		<property name="url" value="${jdbc.url}" />  
		<property name="username" value="${jdbc.username}" />  
		<property name="password" value="${jdbc.password}" />
  		
  		<property name="initialSize" value="${initialSize}"/>
		<property name="maxActive" value="${maxActive}"/>
		<property name="maxIdle" value="${maxIdle}"/>
		<property name="minIdle" value="${minIdle}"/>
		<property name="maxWait" value="${maxWait}"/>
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}"/>
		<property name="removeAbandoned" value="${removeAbandoned}"/>		
  		<!-- sql心跳包 -->
  		<property name= "testWhileIdle" value="true"/>
		<property name= "testOnBorrow" value="false"/>
		<property name= "testOnReturn" value="false"/>
		<property name= "validationQuery" value="select 1"/>
		<property name= "timeBetweenEvictionRunsMillis" value="60000"/>
		<property name= "numTestsPerEvictionRun" value="${maxActive}"/> 
  </bean>
  
  <!-- 二、Mybatis配置SqlSessionFactory对象 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  	<!-- 1、引用数据源 -->
  	<property name="dataSource" ref="dataSource" />
  	<!-- 2、引用mybatis配置文件 -->
  	<property name="configLocation" value="classpath:mybatis-config.xml" />
  	<!-- 3、TODO 引用Mapper.xml映射文件 -->
  </bean>
  
  <!-- 三、TODO MapperScanner扫描mapper.xml所在的包，生成Mapper实现类，在分模块配置文件中设置  -->
  
  <!-- 四、Spring配置开启扫描 -->
  <!-- 1、开启IOC扫描，同时开启扫描<context:annotation-config/> -->
  <context:component-scan base-package="com.yscxsss.pojo,com.yscxsss.controller,com.yscxsss.aop" />  
  <!-- 2、开启对AOP注解驱动 -->
  <aop:aspectj-autoproxy />
  <!-- 3、开启事务注解驱动 -->
  <tx:annotation-driven transaction-manager="txManager"/>
  
  <!-- 五、Spring事务管理 -->
  <!-- 配置DataSourceTransactionManager时，需要注入数据源 -->
  <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
  	p:dataSource-ref="dataSource">  
  </bean>
  <!-- 定义事务管理的AOP切面 -->  
  <aop:config>
  	<!-- 定义切入点 -->
  	<aop:pointcut id="serviceMethod" expression="execution(* com.yscxsss.service..*.*(..))" />
  	<!-- 将事务增强与切入点组合 -->
  	<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod" />
  </aop:config>
  <!-- 通过tx:advice配置事务增强，为不同的业务方法指定具体的事务规则 -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
  	<tx:attributes>
  		<!-- 为查询方法设定事务增强,read-only=true提高事务处理性能,read-only默认值false -->
  		<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
  		<!-- 当抛出异常时，进行回滚。配置回滚，需要写异常类全名,以下三句可以不写，用*代替 -->
  		<tx:method name="add*" rollback-for="java.lang.RuntimeException"/>
  		<tx:method name="delete*" rollback-for="java.lang.RuntimeException"/>
  		<tx:method name="update*" rollback-for="java.lang.RuntimeException"/>  		
  		<!-- 针对所有的方法进行事务增强，propagation默认值为Required -->
  		<tx:method name="*" propagation="REQUIRED"/>
  	</tx:attributes>
  </tx:advice>
 
  <!-- 六、导入分模块配置文件 -->
  <import resource="user/applicationContext-public.xml"/>
  <import resource="order/applicationContext-public.xml"/>
  <import resource="product/applicationContext-public.xml"/>
  <import resource="category/applicationContext-public.xml"/>
  
  
</beans> 